{"version":3,"file":"drag.min.js","sources":["../src/utils.ts","../src/Dragger.ts","../src/drag.ts","../src/index.umd.ts"],"sourcesContent":["import { Client, Position } from \"./types\";\nimport { IArrayFormat } from \"@daybrush/utils\";\n\nexport function getPinchDragPosition(\n    clients: Client[],\n    prevClients: Client[],\n    startClients: Client[],\n    startPinchClients: Client[],\n) {\n    const nowCenter = getAverageClient(clients);\n    const prevCenter = getAverageClient(prevClients);\n    const startCenter = getAverageClient(startPinchClients);\n    const pinchClient = getAddClient(startPinchClients[0], getMinusClient(nowCenter, startCenter));\n    const pinchPrevClient = getAddClient(startPinchClients[0], getMinusClient(prevCenter, startCenter));\n\n    return getPosition(pinchClient, pinchPrevClient, startClients[0]);\n}\nexport function isMultiTouch(e: any): e is TouchEvent {\n    return e.touches && e.touches.length >= 2;\n}\nexport function getPositionEvent(e: any): Client[] {\n    if (e.touches) {\n        return getClients(e.touches);\n    } else {\n        return [getClient(e)];\n    }\n}\nexport function getPosition(client: Client, prevClient: Client, startClient: Client): Position {\n    const { clientX, clientY } = client;\n    const {\n        clientX: prevX,\n        clientY: prevY,\n    } = prevClient;\n\n    const {\n        clientX: startX,\n        clientY: startY,\n    } = startClient;\n    const deltaX = clientX - prevX;\n    const deltaY = clientY - prevY;\n    const distX = clientX - startX;\n    const distY = clientY - startY;\n\n    return {\n        clientX,\n        clientY,\n        deltaX,\n        deltaY,\n        distX,\n        distY,\n    };\n}\nexport function getDist(clients: Client[]) {\n    return Math.sqrt(\n        Math.pow(clients[0].clientX - clients[1].clientX, 2)\n        + Math.pow(clients[0].clientY - clients[1].clientY, 2),\n    );\n}\nexport function getPositions(clients: Client[], prevClients: Client[], startClients: Client[]): Position[] {\n    return clients.map((client, i) => getPosition(client, prevClients[i], startClients[i]));\n}\nexport function getClients(touches: IArrayFormat<Touch>) {\n    const length = Math.min(touches.length, 2);\n    const clients = [];\n\n    for (let i = 0; i < length; ++i) {\n        clients.push(getClient(touches[i]));\n    }\n    return clients;\n}\nexport function getClient(e: MouseEvent | Touch): Client {\n    return {\n        clientX: e.clientX,\n        clientY: e.clientY,\n    };\n}\nexport function getAverageClient(clients: Client[]) {\n    return {\n        clientX: (clients[0].clientX + clients[1].clientX) / 2,\n        clientY: (clients[0].clientY + clients[1].clientY) / 2,\n    };\n}\nexport function getAddClient(client1: Client, client2: Client) {\n    return {\n        clientX: (client1.clientX + client2.clientX),\n        clientY: (client1.clientY + client2.clientY),\n    };\n}\n\nexport function getMinusClient(client1: Client, client2: Client) {\n    return {\n        clientX: (client1.clientX - client2.clientX),\n        clientY: (client1.clientY - client2.clientY),\n    };\n}\n","import { DragOptions, Client, Position, OnDrag } from \"./types\";\nimport {\n    getPositionEvent, getPosition, getClients, getPositions,\n    isMultiTouch, getPinchDragPosition, getAverageClient, getDist,\n} from \"./utils\";\nimport { addEvent, removeEvent } from \"@daybrush/utils\";\n\nexport default class Dragger {\n    public options: DragOptions = {};\n    private flag = false;\n    private pinchFlag = false;\n    private datas = {};\n    private isDrag = false;\n    private isPinch = false;\n    private isMouse = false;\n    private isTouch = false;\n    private prevClients: Client[] = [];\n    private startClients: Client[] = [];\n    private movement: number = 0;\n    private startPinchClients: Client[] = [];\n    private startDistance: number = 0;\n    private customDist = [0, 0];\n\n    constructor(private el: Element, options: DragOptions = {}) {\n        this.options = {\n            container: el,\n            preventRightClick: true,\n            pinchThreshold: 0,\n            events: [\"touch\", \"mouse\"],\n            ...options,\n        };\n\n        const { container, events } = this.options;\n\n        this.isTouch = events!.indexOf(\"touch\") > -1;\n        this.isMouse = events!.indexOf(\"mouse\") > -1;\n        this.customDist = [0, 0];\n\n        if (this.isMouse) {\n            addEvent(el, \"mousedown\", this.onDragStart);\n            addEvent(container!, \"mousemove\", this.onDrag);\n            addEvent(container!, \"mouseup\", this.onDragEnd);\n        }\n        if (this.isTouch) {\n            const passive = {\n                passive: false,\n            };\n            addEvent(el, \"touchstart\", this.onDragStart, passive);\n            addEvent(container!, \"touchmove\", this.onDrag, passive);\n            addEvent(container!, \"touchend\", this.onDragEnd, passive);\n        }\n    }\n    public isDragging() {\n        return this.isDrag;\n    }\n    public isPinching() {\n        return this.isPinch;\n    }\n    public scrollBy(deltaX: number, deltaY: number, e: any, isCallDrag: boolean = true) {\n        if (!this.flag) {\n            return;\n        }\n        this.startClients.forEach(client => {\n            client.clientX -= deltaX;\n            client.clientY -= deltaY;\n        });\n        this.prevClients.forEach(client => {\n            client.clientX -= deltaX;\n            client.clientY -= deltaY;\n        });\n        isCallDrag && this.onDrag(e, true);\n    }\n    public onDragStart = (e: any) => {\n        if (!this.flag && e.cancelable === false) {\n            return;\n        }\n        if (isMultiTouch(e)) {\n            if (!this.flag && (e.touches.length !== e.changedTouches.length)) {\n                return;\n            }\n            if (!this.pinchFlag) {\n                this.onPinchStart(e);\n            }\n        }\n        if (this.flag) {\n            return;\n        }\n        const clients = this.startClients[0] ? this.startClients : getPositionEvent(e);\n\n        this.customDist = [0, 0];\n        this.flag = true;\n        this.isDrag = false;\n        this.startClients = clients;\n        this.prevClients = clients;\n        this.datas = {};\n        this.movement = 0;\n\n        const position = getPosition(clients[0], this.prevClients[0], this.startClients[0]);\n\n        const {\n            dragstart,\n            preventRightClick,\n        } = this.options;\n\n        if (\n            (preventRightClick && e.which === 3)\n            || (dragstart && dragstart({\n                datas: this.datas,\n                inputEvent: e,\n                ...position,\n            })) === false) {\n            this.startClients = [];\n            this.prevClients = [];\n            this.flag = false;\n        }\n        this.flag && e.preventDefault();\n    }\n    public onDrag = (e: any, isScroll?: boolean) => {\n        if (!this.flag) {\n            return;\n        }\n        const clients = getPositionEvent(e);\n\n        if (this.pinchFlag) {\n            this.onPinch(e, clients);\n        }\n        const result = this.move([0, 0], e, clients);\n\n        if (!result || (!result.deltaX && !result.deltaY)) {\n            return;\n        }\n        const drag = this.options.drag;\n\n        drag && drag({\n            ...result,\n            isScroll: !!isScroll,\n            inputEvent: e,\n        });\n    }\n    public move([deltaX, deltaY]: number[], inputEvent: any, clients = this.prevClients): OnDrag | undefined {\n        const customDist = this.customDist;\n        const prevClients = this.prevClients;\n        const startClients = this.startClients;\n        const position: Position = this.pinchFlag\n            ? getPinchDragPosition(clients, prevClients, startClients, this.startPinchClients)\n            : getPosition(clients[0], prevClients[0], startClients[0]);\n\n        customDist[0] += deltaX;\n        customDist[1] += deltaY;\n        position.deltaX += deltaX;\n        position.deltaY += deltaY;\n\n        const {\n            deltaX: positionDeltaX,\n            deltaY: positionDeltaY,\n        } = position;\n\n        position.distX += customDist[0];\n        position.distY += customDist[1];\n\n        this.movement += Math.sqrt(positionDeltaX * positionDeltaX + positionDeltaY * positionDeltaY);\n        this.prevClients = clients;\n        this.isDrag = true;\n\n        return {\n            datas: this.datas,\n            ...position,\n            isScroll: false,\n            inputEvent,\n        };\n    }\n    public onDragEnd = (e: any) => {\n        if (!this.flag) {\n            return;\n        }\n        if (this.pinchFlag) {\n            this.onPinchEnd(e);\n        }\n        this.flag = false;\n\n        const dragend = this.options.dragend;\n        const prevClients = this.prevClients;\n        const startClients = this.startClients;\n\n        const position: Position = this.pinchFlag\n            ? getPinchDragPosition(prevClients, prevClients, startClients, this.startPinchClients)\n            : getPosition(prevClients[0], prevClients[0], startClients[0]);\n\n        this.startClients = [];\n        this.prevClients = [];\n        dragend && dragend({\n            datas: this.datas,\n            isDrag: this.isDrag,\n            inputEvent: e,\n            ...position,\n        });\n    }\n    public onPinchStart(e: TouchEvent) {\n        const { pinchstart, pinchThreshold } = this.options;\n\n        if (this.isDrag && this.movement > pinchThreshold!) {\n            return;\n        }\n        const pinchClients = getClients(e.changedTouches);\n\n        this.pinchFlag = true;\n        this.startClients.push(...pinchClients);\n        this.prevClients.push(...pinchClients);\n        this.startDistance = getDist(this.prevClients);\n        this.startPinchClients = [...this.prevClients];\n\n        if (!pinchstart) {\n            return;\n        }\n        const startClients = this.prevClients;\n        const startAverageClient = getAverageClient(startClients);\n        const centerPosition = getPosition(\n            startAverageClient,\n            startAverageClient,\n            startAverageClient,\n        );\n        pinchstart({\n            datas: this.datas,\n            touches: getPositions(startClients, startClients, startClients),\n            ...centerPosition,\n            inputEvent: e,\n        });\n    }\n    public onPinch(e: TouchEvent, clients: Client[]) {\n        if (!this.flag || !this.pinchFlag) {\n            return;\n        }\n        this.isPinch = true;\n\n        const pinch = this.options.pinch;\n        if (!pinch) {\n            return;\n        }\n        const prevClients = this.prevClients;\n        const startClients = this.startClients;\n        const centerPosition = getPosition(\n            getAverageClient(clients),\n            getAverageClient(prevClients),\n            getAverageClient(startClients),\n        );\n        const distance = getDist(clients);\n        pinch({\n            datas: this.datas,\n            touches: getPositions(clients, prevClients, startClients),\n            scale: distance / this.startDistance,\n            distance,\n            ...centerPosition,\n            inputEvent: e,\n        });\n    }\n    public onPinchEnd(e: TouchEvent) {\n        if (!this.flag || !this.pinchFlag) {\n            return;\n        }\n        const isPinch = this.isPinch;\n\n        this.isPinch = false;\n        this.pinchFlag = false;\n        const pinchend = this.options.pinchend;\n\n        if (!pinchend) {\n            return;\n        }\n        const prevClients = this.prevClients;\n        const startClients = this.startClients;\n        const centerPosition = getPosition(\n            getAverageClient(prevClients),\n            getAverageClient(prevClients),\n            getAverageClient(startClients),\n        );\n        pinchend({\n            datas: this.datas,\n            isPinch,\n            touches: getPositions(prevClients, prevClients, startClients),\n            ...centerPosition,\n            inputEvent: e,\n        });\n        this.isPinch = false;\n        this.pinchFlag = false;\n    }\n    public unset() {\n        const el = this.el;\n        const container = this.options.container!;\n\n        if (this.isMouse) {\n            removeEvent(el, \"mousedown\", this.onDragStart);\n            removeEvent(container as any, \"mousemove\", this.onDrag);\n            removeEvent(container as any, \"mouseup\", this.onDragEnd);\n        }\n        if (this.isTouch) {\n            removeEvent(el, \"touchstart\", this.onDragStart);\n            removeEvent(container as any, \"touchmove\", this.onDrag);\n            removeEvent(container as any, \"touchend\", this.onDragEnd);\n        }\n    }\n}\n","import Dragger from \"./Dragger\";\nimport { DragOptions } from \"./types\";\n\nexport default function setDrag(el: Element, options: DragOptions) {\n    return new Dragger(el, options);\n}\n","\nimport Dragger, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (Dragger as any)[name] = (modules as any)[name];\n}\n\nexport default Dragger;\n"],"names":["getPinchDragPosition","clients","prevClients","startClients","startPinchClients","nowCenter","getAverageClient","prevCenter","startCenter","getPosition","getAddClient","getMinusClient","getPositionEvent","e","touches","getClients","getClient","client","prevClient","startClient","clientX","clientY","deltaX","deltaY","distX","distY","getDist","Math","sqrt","pow","getPositions","map","i","length","min","push","client1","client2","el","options","_this","flag","cancelable","isMultiTouch","changedTouches","pinchFlag","onPinchStart","customDist","isDrag","datas","position","movement","_a","dragstart","which","inputEvent","preventDefault","isScroll","onPinch","result","move","drag","onPinchEnd","dragend","container","preventRightClick","pinchThreshold","events","isTouch","indexOf","isMouse","this","addEvent","onDragStart","onDrag","onDragEnd","passive","isPinch","isCallDrag","forEach","positionDeltaX","positionDeltaY","_c","pinchstart","pinchClients","_b","startDistance","startAverageClient","centerPosition","pinch","distance","scale","pinchend","removeEvent","Dragger","name","modules"],"mappings":"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"}